内部排序：将需要处理的所有数据都加载到内存中进行排序；
        插入排序(直接插入排序、希尔排序),选择排序(简单选择排序、堆排序),交换排序(冒泡排序、快速排序),归并排序,基数排序

外部排序：数据量过大，无法全部加载到内存中，需要借助外部存储文件进行排序；

时间频度：一个算法中的语句执行的次数称为语句频度或时间频度,记为T(n)。
        一个算法花费的时间与算法中语句执行的次数成正比，哪个算法中语句执行次数多，它花费时间就多。
        随着n的变大(即程序规模的变大)，有三个特点：即常数项、低次项和高次项系数都可以忽略。

时间复杂度：一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，
          T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数，记作：T(n)=O(f(n));
          并称O(f(n))为算法渐进时间复杂度，简称时间复杂度;
          T(n)不同，时间复杂度可能相同。

即找到时间频度函数对应的同数量级函数，然后以O(同量级函数)表示；

注意：时间复杂度是和<变量>的规模有没有关系，而不是大小，如果随着变量的增加，消耗的时间并不随着增加，那么这个时间复杂度就是没有改变的。

平均时间复杂度：所有可能输入的实例均以等概率出现的情况下，该算法的运行时间。
最坏时间复杂度：最坏情况下的时间复杂度称为最坏时间复杂度。
             一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的目的保证了算法的运行时间不会比最坏的情况更长。